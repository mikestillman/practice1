
			   Macaulay2
	    by Daniel R. Grayson <dan@math.uiuc.edu>
	 and Michael E. Stillman <mike@math.cornell.edu>

	available from http://www.math.uiuc.edu/Macaulay2/

We thank the United States National Science Foundation for generous funding
to develop Macaulay2.

Macaulay2 is copyright 1993-2012 by Daniel R. Grayson and Michael E. Stillman.
We permit you to use the source code under the terms of the GNU General Public
License (GPL), version 2 or 3, as published by the Free Software Foundation;
see the files Macaulay2/COPYING-*.  The packages contributed by various
authors, located in the directory Macaulay2/packages/, come with separate
licenses.  The binary distributions of Macaulay2 are licensed under GPL 
version 3.

This is free software.  There is no warranty; not even for merchantability or
fitness for a particular purpose.

This file describes how to build the software from sources and is not included
in binary distributions.  Most users will prefer to download a binary
distribution.

---------
Programs
---------

Here are programs you may have to install on your system to build Macaulay2.

   program: fakeroot
    get at: http://ftp.debian.org/debian/pool/main/f/fakeroot
     notes: You need this only if you intend to make a debian distribution
            package for Macaulay2.

   program: rpmbuild
     notes: needed only if you want to make an rpm distribution file

---------
Libraries
---------

Here are some libraries you may have to install on your system to build
Macaulay2.  If your operating system distinguishes between development
versions and run-time versions of the libraries, you will need the development
version.

Here are commands that will get you a good development environment under
various modern operating systems:

  Ubuntu:

    sudo apt-get install -y openssh-server xbase-clients emacs subversion make autoconf gcc libc6-dev g++ gfortran flex bison liblapack-dev libgdbm-dev libgc-dev libpari-dev libreadline5-dev patch libmpfr-dev libntl-dev libcdd-dev libxml2-dev libz-dev libreadline-dev libncurses-dev

  Debian:

    sudo apt-get install -y openssh-server xbase-clients emacs subversion make autoconf gcc libc6-dev g++ gfortran flex bison liblapack-dev libgdbm-dev libgc-dev libgmp3-dev libmpfr-dev libpari-dev autoconf bison emacs flex g++ gcc gcc-4.3 gfortran libc6-dev libcdd-dev libgc-dev libgdbm-dev libglpk-dev libgmp3-dev liblapack-dev libmpfr-dev libncurses5-dev libntl-dev libpari-dev libreadline5-dev make openssh-server subversion xbase-clients libxml2-dev curl libz-dev

  Fedora:

    sudo yum -y install emacs gcc-c++ bison flex autoconf subversion patch ncurses-devel ncurses-devel gdbm-devel glpk-devel cddlib-devel libxml2-devel rpm-build kernel-devel fakeroot pari-devel gc-devel ntl-devel lapack-devel gmp-devel mpfr-devel rpmdevtools

  Scientific linux:

    sudo yum install -y emacs subversion lapack gcc-c++ gcc-gfortran flex bison autoconf autoconf flex bison ncurses-devel libxml2-devel zlib-devel gdbm-devel gmp-devel readline-devel rpm-build strace

    For making an rpm file, install fakeroot manually, from:
    	 http://ftp.debian.org/debian/pool/main/f/fakeroot/fakeroot_1.11.tar.gz

  Cygwin under Microsoft Windows:

    # use setup to install these packages:
	autoconf automake bison emacs-X11 file flex gcc4-core gcc4-fortran gcc4-g++ gdb
	libgc-devel libgdbm-devel libglpk-devel liblapack-devel libstdc++6-devel
	libxml2-devel make mpfr-devel patchutils readline subversion time wget

    # you may also want these:
    	emacs-el gvim libxml2-doc openssh psmisc unzip vim xconsole xkill

----------------------
Getting the source code
----------------------

The best way to get the source code is to download a tar file from our web site
that contains the source code corresponding to a major release.

To get the very latest source code (which may not always work):

	svn export svn://macaulay2.math.uiuc.edu/Macaulay2/trunk/M2

-----------------------
Compiling
-----------------------

Begin with these commands:

	cd M2
	make

The "make" command above runs the commands "autoconf" and "autoheader", which
create the "configure" script and the "include/config.h.in" file, needed in the
next steps.  Once those files are created, it is not necessary to make them
again.  The "make" command on your system should be a recent version of GNU
make.

Now continute building the program this way:

	./configure
	make
	make check			# optional
	make install

Alternatively, especially if you would like to build versions for multiple
architectures, or if you want confidence that "make clean" and "make distclean"
will really work, you can make a separate "build directory" somewhere else and
compile it there, for example, in a subdirectory of the subdirectory BUILD,
provided for that purpose:

	mkdir BUILD/normal
	cd BUILD/normal
	../../configure
	make
	make check			# optional
	make install

By default, the files are installed in appropriate subdirectories of
/usr/local.  To specify a different location (prefix) you may use an option to
the configure script:

	../../configure --prefix=/foo/bar

Or, to specify a different location temporarily you may add an option to the
"make install" line:

	make prefix=/foo/bar install

In either case, files will be installed in the following directories:

	/foo/bar/bin
	/foo/bar/share/Macaulay2
	/foo/bar/share/doc/Macaulay2
	/foo/bar/share/man/man1
	/foo/bar/share/emacs/site-lisp
	/foo/bar/lib/Macaulay2

To make an encapsulated directory tree or distribution tarball suitable for use
with the program "epkg" (see http://www.encap.org/epkg/), replace the
configuration command above with:

	./configure --enable-encap

The effect is to insert one more component into the path names used at
installation time, so that in response to 

	make prefix=/foo/bar install

files will be installed in the following directories:

	/foo/bar/Macaulay2-*/bin
	/foo/bar/Macaulay2-*/share/Macaulay2
	/foo/bar/Macaulay2-*/share/doc/Macaulay2
	/foo/bar/Macaulay2-*/share/man/man1
	/foo/bar/Macaulay2-*/share/emacs/site-lisp
	/foo/bar/Macaulay2-*/lib/Macaulay2

Each * above is replaced by the current version number.  There will
also be a few extra files placed in the directory /foo/bar/Macaulay2-*
which instruct epkg how to make appropriate symbolic links to install
our program, and how to initialize the dumped data file, if present:

	/foo/bar/Macaulay2-*/encapinfo
	/foo/bar/Macaulay2-*/postinstall
	/foo/bar/Macaulay2-*/preremove

To use a different prefix, say /mnt/local, for finding libraries and include
files installed in a nonstandard location:

	../configure LDFLAGS=-L/mnt/local/lib CPPFLAGS=-I/mnt/local/include ...

where ... represents the remaining arguments, as above.  As an example, if
you have compiled the libraries with fink, then you could use this line:

        ../configure LDFLAGS=-L/sw/lib CPPFLAGS=-I/sw/include ...

To specify libraries to link against during configuration, use the
LIBS environment variable, as described in documentation for autoconf.
Example:

	../configure LIBS=-lfoo ...

To see descriptions of all the environment variables that influence
configuration, run this command and look at the section of the output
entitled "Some influential environment variables":

	../configure --help

The only one of these variables with a nonempty default value is
CFLAGS, and its default value is "-g -O2".  That will be supplanted if
you override it.

-------------------------------------------
Compiling on multiple machine architectures
-------------------------------------------

If multiple machine architectures are supported by your hardware and operating
system, a good way to specify which one to use is to use the build option to
autoconf's configure script with an architecture in config.guess format, as
well as to specify names for the compilers that include the additional options
for the architecture to be used.  This will work with gmp, for example, as it
knows how to produce the additional options to the compilers:

   ../configure --build=x86_64-apple-darwin CC="gcc -m64" CXX="g++ -m64"

Another way to do it is to add the architecture option to CFLAGS and to
CXXFLAGS.  The disadvantage of that approach is that the package might have its
own idea about what values to use for those options and ignore these settings:

   ../configure CFLAGS="-O2 -m64" CXXFLAGS="-O2 -m64"

Sometimes a library will get confused by values for CC and CXX with spaces in
them, or will try to parse the options, and get confused by the "-m64" option.
In that case, the work-around is to create shell scripts on your path called
something like gcc-m64 and g++-m64 that can be used as the compilers, and to
use this instead.  In the shell script gcc-m64 put this single line:

     exec gcc -m64 "$@"

In the shell script g++-m64 put this single line:

     exec g++ -m64 "$@"

Mark both shell scripts executable.

-----------------------
Microsoft Windows XP and Vista notes
-----------------------

    ----------------------
    Cygwin
    ----------------------

    Notes:

      - Some configure scripts, notably that of "libtool", assume ccp is in /lib
        on every system.  Work around:

	   ln -s /usr/bin/cpp /lib

----------------------
MacOS X notes
----------------------

There are several methods for installing Macaulay2 under Mac OS X.

(1) Download the ppc or i386 disk images and follow the directions in
    the read me file.  This is the easiest and fastest method.

(2) Use the fink system (http://fink.sourceforge.net).

    Follow the instructions at the Fink website to install Fink itself,
    add unstable/main to the appropriate line in /sw/etc/fink.conf, and
    then install Fink's "macaulay2" package.  You can choose the binary
    installation method or the source installation method (which will
    download the source files and compile them on your machine).  You may
    also wish to install emacs or xemacs using Fink, for the best
    interface to Macaulay2.

    Fink can also be used to install other software of interest to
    mathematicians, and is highly recommended. 

(3) Build from source yourself.  
    
    For specific scripts that we use to build the disk images,
    see BUILD/mike/Makefile and BUILD/mike/darwin64/Makefile.

