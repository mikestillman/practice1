Date: Thu, 3 Feb 2011 20:06:33 -0800 (PST)
Subject: Hom with a matrix
From: Tom Braden

There is an inconsistency in the behavior between Hom(Module, Module)
and Hom(Module, Matrix).  In particular, it is not true that Hom(M, f)
is a map from Hom(M, source f) to Hom(M, target f).

For instance, if I put

       R = QQ[t]; M = R^{0,1};

      f = map(M, M, 1);
      F = Hom(M, f);

then

degrees target F = {{0}, {-1}, {1}, {0}}

but

degrees Hom(M, M) = {{-1}, {0}, {0}, {1}}.

That looks to like Hom(M, f) is doing something reasonable, while
Hom(M, M) is sorting the generators by degree.  This is causing me
problems because I want to apply homomorphism to elements of the
target(Hom(M,f)) to turn them into matrices M-->M.  But
target(Hom(M,M)) doesn't have the right cache information, and I don't
see any way to get the "correct" isomorphism between the target of
Hom(M, f) and Hom(M, M) once the generators have been reordered.

Any thoughts or suggestions for a workaround would be appreciated.

-- Tom
=============================================================================
The problem is that the code for Hom(M,N) is a bit more complicated, because 
it allows non-free modules, not allowed by the code for Hom(M,f).  One of 
the functions called is "modulo" ( see 
http://www.math.uiuc.edu/Macaulay2/doc/Macaulay2-1.4/share/doc/Macaulay2/Macaulay2Doc/html/_modulo_lp__Matrix_cm__Matrix_rp.html 
), and it seems to be sorting the degrees, as in this example, where you see 
a permutation matrix instead of an identity matrix, which would have been an 
equally valid answer (any other matrix with the same image would be a valid 
answer):


i48 : modulo( map(R^0,R^{1..5}, 0 ), map(R^0,R^0, 0) )

o48 = {-1} | 0 0 0 0 1 |
      {-2} | 0 0 0 1 0 |
      {-3} | 0 0 1 0 0 |
      {-4} | 0 1 0 0 0 |
      {-5} | 1 0 0 0 0 |

              5       5
o48 : Matrix R  <--- R

I wonder whether it's easy to fix "modulo" to be a bit more conservative.  
That would ensure that Hom(M,N) is always equal to dual(M)**N when M and N 
are free (which is the basic problem here).
=============================================================================
Meanwhile, here's a work-around, but I haven't checked whether it screws up "homomorphism":

modulo' = (f,g) -> if g == 0 then id_(source f) else modulo(f,g)
trim' = M -> if gens M == 1 and relations M == 0 then ambient M else trim M
Hom(Module, Module) := Module => (M,N) -> (
     m := presentation M;
     mdual := transpose m;
     n := presentation N;
     h1 := modulo'(mdual ** target n, target mdual ** n);
     MN := trim' subquotient(h1,source mdual ** n);
     MN.cache.Hom = {M,N,source mdual,target n};
     MN)
=============================================================================
