// Copyright 1995 Michael E. Stillman

#include "ZZp.hpp"
#include "text-io.hpp"
#include "monoid.hpp"
#include "ringmap.hpp"
#include "ZZ.hpp"
#include "gbring.hpp"

extern RingZZ *globalZZ;

#define _ZERO 0
bool Z_mod::initialize_Z_mod(int p)
{
  initialize_ring(p);
  declare_field();
  int i,j,q,n;

  if (P==2)
    minus_one_ = 1;
  else
    minus_one_ = (P-1)/2;

  if (P==2)
    prim_root = 1;
  else
    {
      j=1;
      for (i=2; (i<P && j<P-1); i++)
        for (q=i,j=1; (q!=1 && j<P); q=(q*i)%P,j++);
      prim_root = i-1;
    }

  // cerr << "z_mod_p: creating table for P = " << P << endl;
  log_table = newarray_atomic(int,P);
  exp_table = newarray_atomic(int,P);
  for (i=1, n=prim_root; i<P; i++, n=(n*prim_root)%P)
    {
      log_table[n] = i;  // i = log_(base prim_root)(n)
      exp_table[i] = n;  // n = (prim_root)^i
    }
  // 0 is represented by 0.
  exp_table[0] = 0;
  log_table[0] = 0;

  P1 = P-1;

  zeroV = from_int(0);
  oneV = from_int(1);
  minus_oneV = from_int(-1);

  coeffR = new CoefficientRingZZp(P,log_table, exp_table);
  return true;
}

Z_mod *Z_mod::create(int p)
{
  Z_mod *result = new Z_mod;
  if (!result->initialize_Z_mod(p)) return 0;

  return result;
}


void Z_mod::text_out(buffer &o) const
{
  o << "ZZ/" << P;
}

int Z_mod::to_int(int f) const
{
  int n = exp_table[f];
  if (n > P/2) n -= P;
  return n;
}

int Z_mod::coerce_to_int(ring_elem a) const
{
  return to_int(a.int_val);
}

int Z_mod::discrete_log(ring_elem a) const
{
  if (a.int_val == 0) return -1;
  if (a.int_val == P1) return 0;
  return a.int_val;
}

void Z_mod::elem_text_out(buffer &o,
                        const ring_elem a,
                        bool p_one,
                        bool p_plus,
                        bool p_parens) const
{
  int n = to_int(a);
  if (n < 0)
    {
      o << '-';
      n = -n;
    }
  else if (p_plus)
    o << '+';
  if (p_one || n != 1) o << n;
}

ring_elem Z_mod::from_int(int n) const
{
  int m = n % P;
  if (m < 0) m += P;
  m = log_table[m];
  return ring_elem(m);
}

ring_elem Z_mod::from_int(mpz_ptr n) const
{
//  cout << "from_int(";
//  bignum_text_out(cout, n);
//  cout << ") = " << endl;
  mpz_t result;
  mpz_init(result);
  mpz_mod_ui(result, n, P);
  int m = mpz_get_si(result);
//  cout << m << endl;
  if (m < 0) m += P;
  m = log_table[m];
  return ring_elem(m);
}

ring_elem Z_mod::from_rational(mpq_ptr q) const
{
  ring_elem a = Z_mod::from_int(mpq_numref(q));
  ring_elem b = Z_mod::from_int(mpq_denref(q));
  if (b == _ZERO)
    return _ZERO;
  return Z_mod::divide(a,b);
}

bool Z_mod::promote(const Ring *Rf, const ring_elem f, ring_elem &result) const
{
  // Rf = Z ---> Z/p
  if (Rf == globalZZ)
    {
      result = from_int(f.get_mpz());
      return true;
    }
  return false;
}

bool Z_mod::lift(const Ring *Rg, const ring_elem f, ring_elem &result) const
{
  // Rg = Z ---> Z/p
  if (Rg == globalZZ)
    {
      result = Rg->from_int(coerce_to_int(f));
      return true;
    }
  return false;
}

bool Z_mod::is_unit(const ring_elem f) const
{
  return (f != 0);
}

bool Z_mod::is_zero(const ring_elem f) const
{
  return (f == 0);
}

bool Z_mod::is_equal(const ring_elem f, const ring_elem g) const
{
  return f.int_val == g.int_val;
}

int Z_mod::compare_elems(const ring_elem f, const ring_elem g) const
{
  int cmp = f.int_val - g.int_val;
  if (cmp < 0) return -1;
  if (cmp == 0) return 0;
  return 1;
}

ring_elem Z_mod::copy(const ring_elem f) const
{
  return f;
}

void Z_mod::remove(ring_elem &) const
{
  // nothing needed to remove.
}

ring_elem Z_mod::negate(const ring_elem f) const
{
  ring_elem result;
  if (f.int_val != 0)
    {
      int c = f.int_val + minus_one_;
      if (c > P1) c -= P1;
      result.int_val = c;
    }
  else
    result.int_val = 0;
  return result;
}

ring_elem Z_mod::add(const ring_elem f, const ring_elem g) const
{
  if (g == 0)  return f;
  if (f == 0)  return g;

  int e1 = exp_table[f.int_val];
  int e2 = exp_table[g.int_val];
  int n = e1 + e2;
  if (n >= P) n -= P;
  return log_table[n];
}

ring_elem Z_mod::subtract(const ring_elem f, const ring_elem g) const
{
  if (g == 0) return f;
  if (f == 0) return negate(g);

  int e1 = exp_table[f.int_val];
  int e2 = exp_table[g.int_val];
  int n = e1 - e2;
  if (n < 0) n += P;
  return log_table[n];
}

ring_elem Z_mod::mult(const ring_elem f, const ring_elem g) const
{
  if (f == 0 || g == 0) return 0;
  int a = f.int_val + g.int_val;
  if (a > P1) a -= P1;
  return a;
}

ring_elem Z_mod::power(const ring_elem f, int n) const
{
  if (f.int_val == 0) return 0;
  int m = (f.int_val * n) % P1;
  if (m <= 0) m += P1;
  return m;
}
ring_elem Z_mod::power(const ring_elem f, mpz_t n) const
{
  if (f == 0) return 0;
  int n1 = RingZZ::mod_ui(n, P1);
  int m = (f.int_val * n1) % P1;
  if (m <= 0) m += P1;
  return m;
}

ring_elem Z_mod::invert(const ring_elem f) const
{
  // As written, 1/0_kk = 1_kk...  We could give an error, but currently do not.
  int a = f.int_val;
  if (a == P1) return P1; // this is the case f == ONE
  ring_elem result;
  result.int_val = P1 - a;
  return result;
}

ring_elem Z_mod::divide(const ring_elem f, const ring_elem g) const
{
  if (f == 0 || g == 0) return 0; // returns 0 if divide by zero is attempted
  int a = f.int_val - g.int_val;
  if (a <= 0) a += P1;
  return a;
}

void Z_mod::syzygy(const ring_elem a, const ring_elem b,
                   ring_elem &x, ring_elem &y) const
{
  x = Z_mod::from_int(1);
  y = Z_mod::divide(a,b);
  y = Z_mod::negate(y);
}


ring_elem Z_mod::eval(const RingMap *map, const ring_elem f, int) const
{
  int a = to_int(f);
  return map->get_ring()->from_int(a);
}

ring_elem Z_mod::random() const
{
  int exp = rawRandomInt((int32_t)P);
  if (exp == 0) exp = P1;
  else if (exp == P1) exp = 0;
  return ring_elem(exp);
}

// Local Variables:
// compile-command: "make -C $M2BUILDDIR/Macaulay2/e "
// End:
