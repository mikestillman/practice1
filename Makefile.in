# @configure_input@
include ../../include/config.Makefile
VPATH = @srcdir@
DEPENDS = yes
############################## main target
all :: compat.h
all :: ../bin/M2$(EXE)
############################## files
# the names on these lines should be in sequence from most dependent to
# least dependent so that "make" can remake the *.dep makefiles
ALLOBJ :=
MADECFILES :=
PROJECT := 
PROJECT += interp.d
PROJECT += texmacs.d
# PROJECT += mp.d
# PROJECT += actorsX.d
PROJECT += interface.d
PROJECT += actors5.d actors4.d actors3.d actors2.d actors.d
PROJECT += evaluate.d
PROJECT += objects.d
PROJECT += struct.d
PROJECT += GC.d
PROJECT += util.d
PROJECT += common.d
PROJECT += convertr.d basic.d binding.d
PROJECT += parser.d lex.d tokens.d
PROJECT += engine.d
PROJECT += gmp.d
PROJECT += err.d
PROJECT += stdiop.d
PROJECT += getline.d
PROJECT += ctype.d
PROJECT += stdio.d
PROJECT += nets.d
PROJECT += vararray.d
PROJECT += varstrin.d
PROJECT += strings.d 
PROJECT += system.d
PROJECT += C.d
ALLOBJ += $(PROJECT:.d=.oo) 

DNAMES := $(PROJECT)
DNAMES += t.d u.d optim.d actorsX.d gr.d grx.d testall.d pp.d redblk.d
CFILES := M2types.c scclib.c M2lib.c gmp_aux.c memdebug.c initgmp2.c gdbm_interface.c
MADECFILES := tmp_init.c startup.c
CCFILES := version.cc initgmp.cc
SRCFILES := getpagesize.h memdebug.c memdebug.h gmp_aux.c types.h $(PROJECT) $(CFILES)
ALLOBJ += $(CFILES:.c=.o) $(MADECFILES:.c=.o) $(CCFILES:.cc=.o)

clean::; rm -f $(DNAMES:.d=.c)

############################## dependencies
ifeq "$(DEPENDS)" "yes"
include $(PROJECT:.d=.dep)
endif
############################## rules
SCC1 := ../c/scc1
.SUFFIXES: .d .sig .dep .res .test .m2
.PHONY : clean all check tags

SCCFLAGS =

ifeq "$(OPTIMIZE)" "yes"
SCCFLAGS += -O
endif

ifeq "$(GCC)" "no"
SCCFLAGS += -nogcc
endif

%.dep : %.d
	$(SCC1) -dep -J. $<
	mv $*.dp $*.dep
	../util/update $*.sg $*.sig
%.c   : %.d
	$(SCC1) $(SCCFLAGS) +gc -J. -noline $<
%.oo  : %.d
	$(SCC1) $(SCCFLAGS) +gc -J. $<
	$(COMPILE.c) -Wno-unused -Wno-uninitialized $*.c $(OUTPUT_OPTION)
	rm $*.c

CPPFLAGS += -I../../include -I@srcdir@ -I. -I../util
CFLAGS += $(DEBUGFLAGS)

# we can't do this because our manufactured c files have lots of unused labels
# CFLAGS  += -Wall -Wshadow -Wcast-qual

ifeq "$(DEBUG)" "yes"
CFLAGS += -DGC_DEBUG
endif

CXXFLAGS += $(WARNINGS)

ifeq (gcc,$(CC))
ifeq (yes,$(shell if gcc -Wl,-v 2>&1 | grep -q 'GNU ld' ; then echo yes ; else echo no ; fi))
ifdef MAPFILE
## - use this to get a memory map listing from the gnu linker
LDFLAGS  += -Wl,-Map,mapfile
endif
endif
endif

ifeq "$(STATIC)" "yes"
LDFLAGS += -static
ifeq ($(OS),Linux)
# this is for gc somehow, see the end of gc/config.h
LDFLAGS += -Wl,-defsym,_DYNAMIC=0
endif
endif

ifeq ($(OS),SunOS)
LOADLIBES += -lsocket -lnsl
endif

clean::; rm -f compat.c compat.h
compat.c compat.h : configure ../../include/config.h
	FLAGS="$(LDFLAGS) $(LOADLIBES) $(LDLIBS)" @srcdir@/configure

M2types.o : M2types.h
M2lib.o scclib.o : compat.h
M2lib.o scclib.o : ../c/compat.h ../c/compat.c types.h memdebug.h ../../include/config.h
memdebug.o scclib.o actors5.o : memdebug.h

clean::; rm -f startup.c
SSTRING := -e 's/\\/\\\\/g' -e 's/"/\\"/g' -e 's/\(.*\)/"\1\\n"/'
layout.m2 : ../../include/config.Makefile
	(echo '--layout.m2'; echo 'if class LAYOUT === Symbol then LAYOUT = hashTable $(LAYOUT)' ) | sed 's/,/,%     /g' | tr % '\n' >$@
startup.c : ../m2/startup.m2 layout.m2
	(echo 'char startupString1[] =' ; \
	 cat layout.m2 | sed $(SSTRING) ; \
	 echo ';' ; \
	 echo 'char startupString2[] =' ; \
	 cat $< | sed $(SSTRING) ; \
	 echo ';' \
        ) >$@
clean :: ; rm -f layout.m2 startup.c

ifeq "$(DUMPDATA)" "yes"
LOADLIBES += -L../dumpdata
LIBRARYFILES += ../dumpdata/libdump.a
LIBRARYOPTIONS += -ldump
endif

ifeq ($(OS),SunOS)
# We use mmap in loaddata(), but if it's dynamically loaded, it may stop working as our mapped
# data covers up the jump tables it uses.  I think.
ALLOBJ += mmap.o
mmap.o : /usr/lib/libc.a; ar x $^ $@
endif

tmp_init.o : tmp_init.c
clean::; rm -f tmp_init.c
tmp_init.c : $(PROJECT)
	../util/timestmp >tmp
	for i in $(PROJECT:.d=) ; do echo "void $${i}__prepare();" ; done >>tmp
	echo 'char current_date[] = __DATE__;' >>tmp
	echo 'char current_time[] = __TIME__;' >>tmp
	echo 'int main_inits() {' >>tmp
	for i in $(PROJECT:.d=) ; do echo "   $${i}__prepare();" ; done >>tmp
	echo '   return 0;}' >>tmp
	mv tmp tmp_init.c


###################### libraries
LIBRARYOPTIONS += -lfac
LIBRARYOPTIONS += -lcf
  # -- we do not need -lcfmem, because we include replacement routines in d/scclib.c
LIBRARYOPTIONS += -lntl
LIBRARYOPTIONS += $(LIBGMP)
LIBRARYOPTIONS += -lgc
LIBRARYOPTIONS += -lgdbm
LIBRARYOPTIONS += -lreadline -lhistory -lcurses
  # we successfully avoid using streamio, but we need the personality function in libstc++
LIBRARYOPTIONS += -lstdc++
LIBRARYOPTIONS += $(LAPACKLIBS)
LOADLIBES := $(LIBRARYOPTIONS) $(LOADLIBES)
LINK_OUTPUT_OPTION = $(OUTPUT_OPTION)

# maybe every system now has all the unix routines we use:
# LDLIBS += -lc ../compat/compat.a

clean::; rm -f ../bin/M2$(EXE)
../bin/M2$(EXE) : $(ALLOBJ) main.o $(LIBRARYFILES) ../e/libgb.a
	rm -f $@
	time $(CC) $(LDFLAGS) $(ALLOBJ) main.o ../e/libgb.a $(LOADLIBES) $(LDLIBS) $(LINK_OUTPUT_OPTION)
	$(STRIPCMD) $@

interpret.a : $(ALLOBJ); $(AR) rcs $@ $^

ifeq "$(XCODE)" "yes"
# Mike uses Xcode, an IDE, under MacOS 10 to link against
all :: interpret.a
endif

# just for testing scc stuff
t_main.o : types.h
t : t_main.o gmp.oo stdio.oo strings.oo system.oo C.o t.o
	$(CC) $(LDFLAGS) $^ $(LOADLIBES) $(LDLIBS) $(OUTPUT_OPTION)
###

all:: tags
tags: @srcdir@/TAGS
clean::; rm -f TAGS @srcdir@/TAGS
@srcdir@/TAGS: Makefile
	@ echo making TAGS
	../util/echoout -r2 $(foreach i, $(SRCFILES),  $(i),0) >"$@"

clean ::; rm -f *.log a.out *.o *.sym *.a *.oo *.sig *.sg *.dep core gmon.out mapfile restart.tmp
distclean : clean; rm -f Makefile
Makefile : Makefile.in; cd ../..; ./config.status Macaulay2/d/Makefile
all :: .gdbinit
.gdbinit: .gdbinit.$(USER); cp $< $@
clean::; rm -f .gdbinit
