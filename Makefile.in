# @configure_input@
include ../../include/config.Makefile
VPATH = @srcdir@
SRCDIR = @srcdir@
DEPENDS = yes

%.o : %.cpp
	@ echo '$(COMPILE.cc) $(OUTPUT_OPTION) $<' >> LOGFILE
	@ echo " ** compiling $<"
	@ $(COMPILE.cc) $(OUTPUT_OPTION) $<

%.s : %.cpp
	@ echo '$(COMPILE.cc) $(OUTPUT_OPTION) $<' >> LOGFILE
	@ echo " ** compiling $< to assembly code, making $@"
	@ $(COMPILE.cc) -S $(OUTPUT_OPTION) $<

%.E : %.cpp
	@ echo '$(COMPILE.cc) $(OUTPUT_OPTION) $<' >> LOGFILE
	@ echo " ** preprocessing $<, making $@"
	@ $(COMPILE.cc) -E $(OUTPUT_OPTION) $<

ntl_interface.o : ntl_interface.cpp
	@ echo '$(COMPILE.cc) $(OUTPUT_OPTION) $<' >> LOGFILE
	@ echo " ** compiling $<"
	@ $(COMPILE.cc) $(OUTPUT_OPTION) $< -Wno-old-style-cast

%.o : %.c
	@ echo '$(COMPILE.c) $(OUTPUT_OPTION) $<' >> LOGFILE
	@ echo " ** compiling $<"
	@ $(COMPILE.c) $(OUTPUT_OPTION) $<

%.dep: %.cpp
	@ echo "$(CXX) -MM $(CPPFLAGS) $< >$*-tmp.dep && <$*-tmp.dep sed 's/\($*\)\.o[ :]*/\1.o $@ : /' >$@ && rm $*-tmp.dep" >> LOGFILE
	@ echo " ** creating $@ from $<"
	@ $(CXX) -MM $(CPPFLAGS) $< >$*-tmp.dep && <$*-tmp.dep sed 's/\($*\)\.o[ :]*/\1.o $@ : /' >$@ && rm $*-tmp.dep

%.dep: %.c
	@ echo "$(CC)  -MM $(CPPFLAGS) $< >$*-tmp.dep && <$*-tmp.dep sed 's/\($*\)\.o[ :]*/\1.o $@ : /' >$@ && rm $*-tmp.dep" >> LOGFILE
	@ echo " ** creating $@ from $<"
	@ $(CC)  -MM $(CPPFLAGS) $< >$*-tmp.dep && <$*-tmp.dep sed 's/\($*\)\.o[ :]*/\1.o $@ : /' >$@ && rm $*-tmp.dep



M2CPPFLAGS  = -I../../include
M2CPPFLAGS += -I../util
M2CPPFLAGS += -I.
CPPFLAGS := $(M2CPPFLAGS) $(CPPFLAGS)

CXXFLAGS += $(DEBUGFLAGS)
CFLAGS   += $(DEBUGFLAGS)

ifeq "$(SHARED)" "yes"
CXXFLAGS += -fPIC
endif

PRE.cc   = $(COMPILE.cc) -E 

include @srcdir@/Makefile.files

.PHONY : all clean distclean install tar check tags

###################################################################
## Targets ##
#############

all :: initialize

all tags:: @srcdir@/TAGS @srcdir@/TAGS.src
@srcdir@/TAGS.src: $(ENGINE_SRCFILES)
	cd @srcdir@ && etags -o TAGS.src $(patsubst @srcdir@/%, %, $^)
@srcdir@/TAGS: Makefile.in @srcdir@/*.hpp @srcdir@/*.h @srcdir@/*.cpp @srcdir@/*.c \
		 @srcdir@/f4/*.hpp @srcdir@/f4/*.cpp \
		 statuscodes
	cd @srcdir@ && etags -o TAGS $(patsubst @srcdir@/%, %, $^)

# the target 'initialize' is used by the Makefile in the parent directory
initialize all :: $(addsuffix .hpp, $(GENERATED_H))

all::; $(MAKE) -C f4

ifeq "$(SHARED)" "yes"
all:: ../lib/libengine1.so ../lib/libengine2.so
else
all:: $(ENGINE_OFILES)
endif

%.ii: %.cpp; $(PRE.cc)        $< $(OUTPUT_OPTION)
%.s : %.cpp; $(COMPILE.cc) -S $< $(OUTPUT_OPTION)
%-demangled.s : %.s; demangle <$< >$@

%.lo : %.c  ; $(COMPILE.c)  -fPIC $< $(OUTPUT_OPTION)
%.lo : %.cc ; $(COMPILE.cc) -fPIC $< $(OUTPUT_OPTION)
%.lo : %.cpp; $(COMPILE.cc) -fPIC $< $(OUTPUT_OPTION)
../lib/libengine.so : $(LOFILES); $(CC) -shared $^ $(OUTPUT_OPTION)

VEC =   -e "s/geobucket/vecHeap/g"      -e "s/FREEMODULETYPE/const FreeModule/g" -e "s/VECTYPE/vecterm */g"
GBVEC = -e "s/geobucket/gbvectorHeap/g" -e "s/FREEMODULETYPE/GBRing/g"     -e "s/VECTYPE/gbvector */g"
RES =   -e "s/geobucket/respolyHeap/g"  -e "s/FREEMODULETYPE/const res2_poly/g"  -e "s/VECTYPE/res2term */g"

#geovec.hpp  : geoT.hpp; sed $(VEC)   $^ >$@
geogbvec.hpp: geoT.hpp; sed $(GBVEC) $^ >$@
geores.hpp  : geoT.hpp; sed $(RES)   $^ >$@

overflow-test : overflow.o

clean::; rm -f *.lo *.o TAGS LOGFILE $(addsuffix .hpp, $(GENERATED_H))
clean::; $(MAKE) -C f4 $@
Makefile : Makefile.in; cd ../..; ./config.status Macaulay2/e/Makefile
clean::; rm -f *.dep dep-*.tmp
ifeq "$(DEPENDS)" "yes"
include $(ENGINE_CFILES:.c=.dep) $(ENGINE_CCFILES:.cpp=.dep)
endif

# this requires gnu sort and gnu uniq commands
NMFLAGS = -o
ifeq (@NM_DEMANGLES@,yes)
NMFLAGS += --demangle
endif
dups-tmp: $(ENGINE_OBJFILES)
	- nm $(NMFLAGS) $(ENGINE_OBJFILES) |grep ' T ' |sort +2 |uniq -2 -d |tee dups-tmp
dups-okay: dups-tmp
	@if [ -s $< ]; then echo "Multiple definitions found:"; cat $<; exit 1; \
	 else touch $@; fi
doxygen : ; cd @srcdir@ && doxygen
distclean: clean; rm -f Makefile

ifeq (@NM_DEMANGLES@,yes)
all:: check-global-new-delete
check-global-new-delete : $(ENGINE_OBJFILES) ; nm -o --demangle $^ | egrep '[WUT] operator (new|delete)' || true
endif

initialize :: statuscodes.h
statuscodes.h : statuscodes
	sed 's/\(.*\):\(.*\):\(.*\)/  \2 = \1,/' <$< >$@
clean::; rm -f statuscodes.h

all::; @ echo "LOGFILE: `wc -l LOGFILE` entries `wc -c LOGFILE` bytes."

# Local Variables:
# compile-command: "make -C $M2BUILDDIR/Macaulay2/e "
# End:

