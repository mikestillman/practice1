# @configure_input@
include ../../include/config.Makefile
VPATH = @srcdir@
# these can be overridden on the command line
DEPENDS = yes
STRIP = @STRIP@
############################## main targets
all: tokens_stub.o
ifneq (@ETAGS@,)
all: tags
endif
initialize all: compat.h

recompile:
	rm -f @pre_bindir@/M2@EXE@
	$(MAKE)

## standard options
M2_LDFLAGS  =

ifeq (@OS@ @SHARED@,Linux yes)
ifneq (@LIBRARIES@,)
M2_LDFLAGS += -Wl,-rpath,@librariesdir@/lib
all: obj-info
obj-info: @pre_bindir@/M2@EXE@
ifneq (@OBJDUMP@,)
	@OBJDUMP@ -x $< | egrep RPATH
	@OBJDUMP@ -x $< | egrep "RPATH +@librariesdir@/lib$$"
else
	echo "--warning: 'objdump' not installed, can't check rpath in M2 binary"
endif
endif
endif

ifeq (@OS@,MacOS)
## This option should increase the stack size to 16MB, but it makes M2 crash.
## The number 1000000 is hex.
## M2_LDFLAGS += -Wl,-stack_size,1000000
endif

M2_LDFLAGS += $(LDFLAGS)

## files

M2_OBJECTS :=
CFILES :=
OPTCFILES := 
EXTRACFILES :=
MADECFILES :=
SRCFILES := 

## engine object files
include @srcdir@/../e/Makefile.files
include @srcdir@/../e/f4/Makefile.files
tmp_init.o: @srcdir@/../e/Makefile.files
tmp_init.o: @srcdir@/../e/f4/Makefile.files
EFILES := $(ENGINE_OFILES:%=../e/%) 
EFILES += $(F4_OBJECT_FILES:%=../e/f4/%) 

## *.c files

OPTCFILES += debug.c
ifeq "@DEBUG@" "yes"
M2_OBJECTS += debug.o
endif

OPTCFILES += M2inits1.cc M2inits2.cc M2inits3.cc factory_init1.cc factory_init2.cc factory_init3.cc
CFILES += M2types.c M2mem.c scclib.c M2lib.c gmp_aux.c gdbm_interface.c
CFILES += factory_allocator.c main.c
SRCFILES += $(OPTCFILES) $(CFILES) M2inits.c

## *.c files, non source, made by us from other files

MADECFILES := startup.c
M2_OBJECTS += $(MADECFILES:.c=.o)
clean:: ; rm -f $(MADECFILES) tmp_init.c

# other *.o files
M2_OBJECTS += ../regex/regex.o

## *.cc files

CCFILES := gmp_init.cc
CCFILES += version.cc
M2_OBJECTS += $(CCFILES:.cc=.o)
SRCFILES += $(CCFILES)

## *.h files

HFILES := M2types.h getpagesize.h types.h M2inits.h M2mem.h debug.h M2mem2.h
SRCFILES += $(HFILES)

## *.d files
## the names on these lines should be in sequence from most dependent to least dependent so that "make" can remake the *.dep makefiles

DFILES := 
DFILES += interp.d
DFILES += texmacs.d
DFILES += interface2.d interface.d

ifeq (@PYTHON@,yes)
DFILES += python.d
CFILES += python-c.c
endif

ifeq (@PARI@,yes)
DFILES += pari.d
pari.oo: CPPFLAGS += -DINCLUDE_PARI_H
pari.oo: CFLAGS += -Wno-shadow
pari-c.o: CFLAGS += -Wall -Wno-unused -UNDEBUG -Wno-shadow
# see REVERSE_PARI
pari-c.o: ../../include/M2/config.h ../../config.status
CFILES += pari-c.c
HFILES += pari-c.h
endif

DFILES += actors5.d

ifeq (@XML@,yes)
DFILES += xmlactors.d
endif

DFILES +=  actors4.d actors3.d actors2.d actors.d

ifeq (@MYSQL@,yes)
DFILES += mysql.d
else
DFILES += mysqldummy.d
endif

DFILES += evaluate.d libfac.d
DFILES += objects.d
DFILES += struct.d
DFILES += GC.d
DFILES += util.d
DFILES += common.d
DFILES += convertr.d basic.d binding.d
DFILES += parser.d lex.d tokens.d
DFILES += engine.d

ifeq (@XML@,yes)
xml-c.o: xml-c.h
CFILES += xml-c.c
DFILES += xml.d
endif

DFILES += gmp.d
DFILES += err.d
DFILES += stdiop.d
DFILES += getline.d
DFILES += stdio.d
DFILES += varnets.d
DFILES += nets.d
DFILES += ctype.d
DFILES += vararray.d
DFILES += varstrin.d
DFILES += strings.d 
DFILES += system.d
DFILES += C.d

actors4.oo basic.oo engine.oo interface.oo objects.oo : ../e/engine.h

# these files depend on USE_MYSQL, which is in config.h:
actors4.oo actors2.oo : ../../include/M2/config.h

M2_OBJECTS += $(CFILES:.c=.o)
M2_OBJECTS += M2-factory.o
M2_OBJECTS += $(DFILES:.d=.oo) 
SRCFILES += $(DFILES)
clean::; rm -f $(DFILES:.d=.c)

############################## dependencies
ifeq "$(DEPENDS)" "yes"
include $(DFILES:.d=.dep)
endif

############################## macros

TOSTATIC =
UNSTATIC =

ifeq (@OS@ @ISSUE@,MicrosoftWindows Cygwin)
TOSTATIC = -Wl,-Bstatic
UNSTATIC = -Wl,-Bdynamic
else
ifeq (@OS@,Linux)
TOSTATIC = -Wl,-Bstatic
UNSTATIC = -Wl,-Bdynamic
else
ifeq (@OS@,FreeBSD)
TOSTATIC = -Wl,-Bstatic
UNSTATIC = -Wl,-Bdynamic
else
ifeq (@OS@,SunOS)
TOSTATIC = -Wl,-Bstatic
UNSTATIC = -Wl,-Bdynamic
else
ifeq (@OS@,MacOS)
# we know about it
else
$(warning no static linking method configured for this OS or linker)
endif
endif
endif
endif
endif

ifeq "@STATIC@" "yes"
MAYBESTATIC = $(TOSTATIC)
else 
MAYBESTATIC = $(UNSTATIC)
endif

############################## rules
SCC1 := ../c/scc1
.SUFFIXES: .d .sig .dep .res .test .m2
.PHONY : clean all check tags

SCCFLAGS =

ifeq "@OPTIMIZE@" "yes"
SCCFLAGS += -O
endif

ifeq "@GCC@" "no"
SCCFLAGS += -nogcc
endif

%.dep : %.d
	$(SCC1) -dep -J. $<
	mv $*.dp $*.dep
	../util/updat $*.sg $*.sig || [ $$? = 88 ]
%.c   : %.d
	$(SCC1) $(SCCFLAGS) +gc -J. -noline $<
%.oo  : %.d
	$(SCC1) $(SCCFLAGS) +gc -J. $<
	$(COMPILE.c) -Wno-unused -Wno-uninitialized -Wno-cast-qual $*.c $(OUTPUT_OPTION)
	rm $*.c
%.ss : %.s ; demangle <$< >$@
%.ii: %.cpp; $(PRE.cc)        $< $(OUTPUT_OPTION)
%.s : %.cpp; $(COMPILE.cc) -S $< $(OUTPUT_OPTION)
%.ii: %.cc; $(PRE.cc)        $< $(OUTPUT_OPTION)
%.s : %.cc; $(COMPILE.cc) -S $< $(OUTPUT_OPTION)
%.ii: %.c; $(PRE.c)        $< $(OUTPUT_OPTION)
%.s : %.c; $(COMPILE.c) -S $< $(OUTPUT_OPTION)

# The following line has been included to remove old style cast warnings while compiling
M2-factory.o: M2-factory.cpp ; $(COMPILE.cc) -Wno-old-style-cast $(OUTPUT_OPTION) $<

M2INCLUDES  = -I../../include
M2INCLUDES += -I@srcdir@/../../include
M2INCLUDES += -I@srcdir@
M2INCLUDES += -I.
M2INCLUDES += -I../util
M2INCLUDES += -I../e
M2INCLUDES += -I@srcdir@/../regex
ifeq (@XML@,yes)
M2INCLUDES += -I/usr/include/libxml2
endif

# it's important that *our* directories get searched first:
CPPFLAGS := $(M2INCLUDES) $(CPPFLAGS) $(M2_CPPFLAGS)
CFLAGS += -Wno-unused-label $(M2_CFLAGS)

ifeq (gcc,@CC@)
ifeq (@ISSUE@,Cygwin)
M2_LDFLAGS  += -Wl,--enable-auto-import
    # we add this linker option to prevent these warning messages:
    # /usr/lib/gcc/i686-pc-cygwin/3.4.4/../../../../i686-pc-cygwin/bin/ld: warning: auto-importing has been activated without --enable-auto-import specified on the command line.
    # This should work unless it involves constant data structures referencing symbols from auto-imported DLLs.
    # Info: resolving _rl_attempted_completion_over by linking to __imp__rl_attempted_completion_over (auto-import)
    # Info: resolving __rl_comment_begin by linking to __imp___rl_comment_begin (auto-import)
    # Info: resolving _rl_readline_name by linking to __imp__rl_readline_name (auto-import)
    # Info: resolving _rl_attempted_completion_function by linking to __imp__rl_attempted_completion_function (auto-import)
    # Info: resolving _rl_basic_word_break_characters by linking to __imp__rl_basic_word_break_characters (auto-import)
    # Info: resolving _rl_readline_version by linking to __imp__rl_readline_version (auto-import)
    # Info: resolving _gdbm_errno by linking to __imp__gdbm_errno (auto-import)
endif
ifeq ($(MAPFILE),yes)
ifeq (yes,$(shell if gcc -Wl,-v 2>&1 | grep -q 'GNU ld' ; then echo yes ; else echo no ; fi))
## - use this to get a memory map listing from the gnu linker
M2_LDFLAGS  += -Wl,-Map,mapfile
endif
endif
endif

ifeq "@STATIC@" "yes"
M2_LIBRARIES := $(MAYBESTATIC)
ifeq (@OS@,Linux)
# This is for gc, see the end of gc/doc/README.linux:
# --Dynamic libraries are supported on an ELF system.  A static executable
# --should be linked with the gcc option "-Wl,-defsym,_DYNAMIC=0".
# I'm turning this off, because we are never completely static any longer,
# and because I don't understand it.
# M2_LDFLAGS += -Wl,-defsym,_DYNAMIC=0
endif
else
M2_LIBRARIES :=
endif

clean::; rm -f compat.c compat.h
compat.c compat.h : configure ../../include/M2/config.h
	FLAGS="$(LDFLAGS) $(LOADLIBES) $(LDLIBS)" @srcdir@/configure

M2types.o: M2types.h
M2lib.o scclib.o : compat.h ../c/compat.h ../c/compat.c types.h
gmp_int.o M2lib.o scclib.o gdbm_interface.o gc_cpp.o version.o M2inits.o debug.o : ../../include/M2/config.h

clean::; rm -f startup.c
SSTRING := -e 's/\\/\\\\/g' -e 's/"/\\"/g' -e 's/\(.*\)/"\1\\n"/'
BSTRING := -e 's/\\/\\\\/g' -e 's/"/\\"/g' -e 's/\(.*\)/"\1"/'
startup.m2: startup.m2.in ; cd ../.. ; ./config.status Macaulay2/d/startup.m2
startup.c: startup.m2
	(\
	 echo 'char startupString[] =' ; cat startup.m2                         | sed $(SSTRING) ; echo  ';' ; \
	 echo 'char startupFile  [] =' ; echo @abs_srcdir@/startup.m2.in        | sed $(BSTRING) ; echo  ';' ; \
        ) >$@
clean:: ; rm -f startup.c
clean-startup.c:; rm -f startup.c
cat-startup.c:; cat startup.c
redo-startup:clean-startup.c startup.c cat-startup.c

ifeq "@DUMPDATA@" "yes"
M2_LIBDEPS += ../dumpdata/libdump.a
M2_LIBRARIES += -L../dumpdata -ldump
endif

M2_OBJECTS += tmp_init.o
tmp_init.o: tmp_init.c 
clean::; rm -f tmp_init.c
tmp_init.c: $(DFILES) Makefile
	echo 'char timestamp[] = __DATE__ ", " __TIME__;' >tmp
	for i in $(DFILES:.d=) ; do echo "void $${i}__prepare();" ; done >>tmp
	echo 'int main_inits() {' >>tmp
	for i in $(DFILES:.d=) ; do echo "   $${i}__prepare();" ; done >>tmp
	echo '   return 0;}' >>tmp
	mv tmp tmp_init.c

###################### libraries

libfactory_init1.a: factory_init1.o ; ar ru $@ $^
libfactory_init2.a: factory_init2.o ; ar ru $@ $^
libM2inits2.a: M2inits2.o       ; ar ru $@ $^

ifeq (@CONSTRUCTOR_ORDER_LIB@,LR)
M2_LIBRARIES += -L. -lfactory_init1 @SINGULARLIBS@ -lfactory_init2
else
M2_LIBRARIES += -L. -lfactory_init2 @SINGULARLIBS@ -lfactory_init1
endif
M2_LIBDEPS    += libfactory_init1.a libfactory_init2.a

M2_LIBRARIES +=  @BUILTLIBS@
M2_LIBRARIES +=  $(TOSTATIC) @LIBS_STATIC@
M2_LIBRARIES +=  $(MAYBESTATIC) @LIBS_STATIC_OR_DYNAMIC@
# I'm not sure whether compiling statically with libstdc++ is a good idea
M2_LIBRARIES += -lstdc++

# Under Ubuntu 8.10 -lgfortranbegin & -lgfortran come from libgfortran3, but that package isn't in Ubuntu 8.4
# so we try to link it statically, because there are many Ubuntu users of 8.4.
# Linking statically with -llapack -lblas results in conflicts between symbols in the two packages under Ubuntu:
#     /usr/lib/gcc/x86_64-linux-gnu/4.3.2/../../../../lib/libblas.a(xerbla.o): In function `xerbla_':
#     (.text+0x0): multiple definition of `xerbla_'
#     /usr/lib/gcc/x86_64-linux-gnu/4.3.2/../../../../lib/liblapack.a(xerbla.o):(.text+0x0): first defined here
#     collect2: ld returned 1 exit status
# Note: static version is here:
#  /usr/lib/gcc/x86_64-linux-gnu/4.3.2/libgfortran.a
#  /usr/lib/gcc/x86_64-linux-gnu/4.3.2/libgfortranbegin.a
M2_LIBRARIES += @FCLIBS_FLAGS@ $(TOSTATIC) @FCLIBS_STATIC@ $(UNSTATIC) @FCLIBS_DYNAMIC@ @LIBS_DYNAMIC@

ifeq (@MYSQL@,yes)
M2_LIBRARIES += -L/usr/lib/mysql -lmysqlclient
endif

ifeq (@XML@,yes)
M2_LIBRARIES += -lxml2
endif

LINK_OUTPUT_OPTION = $(OUTPUT_OPTION)

ifeq (@CONSTRUCTOR_ORDER_LIB@,LR)
M2_LIBRARIES := -lM2inits2 $(M2_LIBRARIES)
else
M2_LIBRARIES := $(M2_LIBRARIES) -lM2inits2
endif
M2_LIBDEPS += libM2inits2.a

M2_OBJECTS += $(EFILES)

ifeq (@CONSTRUCTOR_ORDER_OBJ@,LR)
M2_OBJECTS := M2inits.o $(M2_OBJECTS)
else
M2_OBJECTS := $(M2_OBJECTS) M2inits.o
endif

M2_OBJECTS_AND_LIBRARIES = $(M2_OBJECTS) $(M2_LIBRARIES)

ifeq (@CONSTRUCTOR_ORDER_OBJ@,LR)
# gmp_memory.o must have its constructors run first
M2_OBJECTS_AND_LIBRARIES := gmp_memory.o $(M2_OBJECTS_AND_LIBRARIES)
else
M2_OBJECTS_AND_LIBRARIES := $(M2_OBJECTS_AND_LIBRARIES) gmp_memory.o 
endif

clean::; rm -f @pre_bindir@/M2@EXE@
@pre_bindir@ : ; $(MKDIR_P) "$@"
@pre_bindir@/M2@EXE@: $(M2_OBJECTS) $(M2_LIBDEPS) gmp_memory.o | @pre_bindir@
	$(COMPILE.c) tmp_init.c -o tmp_init.o
	time @CC@ $(M2_LDFLAGS) $(M2_OBJECTS_AND_LIBRARIES) -lm -lc -o "$@".tmp
	printenv LD_LIBRARY_PATH
ifneq (@LDD@,)
	- @LDD@ $@.tmp
endif
ifeq "$(STRIP)" "yes"
ifneq "@STRIPCMD@" ""
ifeq (@STRIP_REMOVE_SECTION@,yes)
	@STRIPCMD@ --remove-section=.comment --remove-section=.note "$@".tmp
else
	@STRIPCMD@ "$@".tmp
endif
endif
endif
	mv "$@".tmp "$@"
	ln -sf @pre_bindir@/M2@EXE@ @abs_top_builddir@
clean::; rm -f @abs_top_builddir@/M2@EXE@

mapfile.demangled: mapfile ; demangle <$< >$@
clean::; rm -f mapfile.demangled

interpret.a: $(M2_OBJECTS); $(AR) rcs $@ $^
ifeq "@XCODE@" "yes"
# Mike uses Xcode, an IDE, under MacOS 10 to link against
all: interpret.a
endif

tags: @srcdir@/TAGS
clean::; rm -f TAGS @srcdir@/TAGS
@srcdir@/TAGS: $(SRCFILES)
	cd @srcdir@ && @ETAGS@ $(shell ../util/echoout -r $(SRCFILES))

clean::; rm -f *.log a.out *.o *.sym *.a *.oo *.sig *.sg *.dep *.dp core gmon.out mapfile restart.tmp
distclean: clean; rm -f Makefile startup.m2
Makefile: Makefile.in; cd ../..; ./config.status Macaulay2/d/Makefile
all: .gdbinit
.gdbinit:; if [ -f @srcdir@/.gdbinit.$(USER) ]; then cp @srcdir@/.gdbinit.$(USER) $@; fi
clean::; rm -f .gdbinit

all: @pre_bindir@/M2@EXE@


# Local Variables:
# compile-command: "make -C $M2BUILDDIR/Macaulay2/d "
# End:
