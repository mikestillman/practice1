# @configure_input@
include ../../include/config.Makefile
VPATH = @srcdir@
# these can be overridden on the command line
DEPENDS = yes
STRIP = @STRIP@
############################## main targets
all :: tokens_stub.o
ifneq (@ETAGS@,)
all :: tags
endif
all :: compat.h

all :: ../bin/M2@EXE@
	printenv LD_LIBRARY_PATH
ifneq (@OBJDUMP@,)
	- @OBJDUMP@ -x $< | grep RPATH
endif
ifneq (@LDD@,)
	- @LDD@ $<
endif

recompile :
	rm -f ../bin/M2@EXE@
	$(MAKE)

## standard options

M2_LDFLAGS  =

ifeq (@STATIC@,no)
ifeq (@OS@,Linux)
ifneq (@LIBRARIES@,)
M2_LDFLAGS += -Wl,-rpath,$(FINALLIBPATH)/lib
endif
endif
endif

M2_LDFLAGS += $(LDFLAGS)

## files

M2_OBJECTS :=
CFILES :=
OPTCFILES := 
EXTRACFILES :=
MADECFILES :=
SRCFILES := 

## engine object files
include @srcdir@/../e/Makefile.files
include @srcdir@/../e/f4/Makefile.files
tmp_init.o : @srcdir@/../e/Makefile.files
tmp_init.o : @srcdir@/../e/f4/Makefile.files
EFILES := $(ENGINE_OFILES:%=../e/%) 
EFILES += $(F4_OBJECT_FILES:%=../e/f4/%) 

## *.c files

OPTCFILES += debug.c
ifeq "@DEBUG@" "yes"
M2_OBJECTS += debug.o
endif

OPTCFILES += M2inits1.cc M2inits2.cc M2inits3.cc factory_init1.cc factory_init2.cc factory_init3.cc
CFILES += M2types.c M2mem.c scclib.c M2lib.c gmp_aux.c gdbm_interface.c gmp_memory.c
CFILES += factory_allocator.c main.c
SRCFILES += $(OPTCFILES) $(CFILES)
M2_OBJECTS += $(CFILES:.c=.o)
M2_OBJECTS += version.o
M2_OBJECTS += M2-factory.o

## *.c files, non source, made by us from other files

MADECFILES := startup.c
M2_OBJECTS += $(MADECFILES:.c=.o)
clean:: ; rm -f $(MADECFILES) tmp_init.c

# other *.o files
M2_OBJECTS += ../regex/regex.o

## *.cc files

CCFILES := gmp_init.cc
M2_OBJECTS += $(CCFILES:.cc=.o)
SRCFILES += $(CCFILES)

## *.h files

HFILES := M2types.h getpagesize.h types.h M2inits.h M2mem.h debug.h M2mem2.h
SRCFILES += $(HFILES)

## *.d files
## the names on these lines should be in sequence from most dependent to least dependent so that "make" can remake the *.dep makefiles

DFILES := 
DFILES += interp.d
DFILES += texmacs.d
DFILES += interface.d
DFILES += actors5.d actors4.d actors3.d actors2.d actors.d
DFILES += evaluate.d libfac.d
DFILES += objects.d
DFILES += struct.d
DFILES += GC.d
DFILES += util.d
DFILES += common.d
DFILES += convertr.d basic.d binding.d
DFILES += parser.d lex.d tokens.d
DFILES += engine.d
DFILES += gmp.d
DFILES += err.d
DFILES += stdiop.d
DFILES += getline.d
DFILES += stdio.d
DFILES += varnets.d
DFILES += nets.d
DFILES += ctype.d
DFILES += vararray.d
DFILES += varstrin.d
DFILES += strings.d 
DFILES += system.d
DFILES += C.d

actors4.oo basic.oo engine.oo interface.oo objects.oo : ../e/engine.h

M2_OBJECTS += $(DFILES:.d=.oo) 
SRCFILES += $(DFILES)
clean::; rm -f $(DFILES:.d=.c)

############################## dependencies
ifeq "$(DEPENDS)" "yes"
include $(DFILES:.d=.dep)
endif

############################## macros

TOSTATIC =
UNSTATIC =

ifeq "@STATIC@" "yes"
ifeq (@OS@,Linux)
# we'd really like to test whether ld is gnu ld here
TOSTATIC = -Wl,-Bstatic
UNSTATIC = -Wl,-Bdynamic
else
ifeq (@OS@,SunOS)
# we'd really like to test whether ld is gnu ld here
TOSTATIC = -Wl,-Bstatic
UNSTATIC = -Wl,-Bdynamic
else
$(error static linking requested, new OS)
endif
endif
endif

############################## rules
SCC1 := ../c/scc1
.SUFFIXES: .d .sig .dep .res .test .m2
.PHONY : clean all check tags

SCCFLAGS =

ifeq "@OPTIMIZE@" "yes"
SCCFLAGS += -O
endif

ifeq "@GCC@" "no"
SCCFLAGS += -nogcc
endif

%.dep : %.d
	$(SCC1) -dep -J. $<
	mv $*.dp $*.dep
	../util/update $*.sg $*.sig
%.c   : %.d
	$(SCC1) $(SCCFLAGS) +gc -J. -noline $<
%.oo  : %.d
	$(SCC1) $(SCCFLAGS) +gc -J. $<
	$(COMPILE.c) -Wno-unused -Wno-uninitialized $*.c $(OUTPUT_OPTION)
	rm $*.c

# The following line has been included to remove old style cast warnings while compiling
M2-factory.o : M2-factory.cpp ; $(COMPILE.cc) -Wno-old-style-cast $(OUTPUT_OPTION) $<

M2INCLUDES  = -I../../include
M2INCLUDES += -I@srcdir@/../../include
M2INCLUDES += -I@srcdir@
M2INCLUDES += -I.
M2INCLUDES += -I../util
M2INCLUDES += -I../e
M2INCLUDES += -I@srcdir@/../regex

# it's important that *our* directories get searched first:
CPPFLAGS := $(M2INCLUDES) $(CPPFLAGS)

CFLAGS += $(DEBUGFLAGS)
CXXFLAGS += $(DEBUGFLAGS)

CFLAGS += -Wno-unused-label

ifeq (gcc,@CC@)
ifeq ($(MAPFILE),yes)
ifeq (yes,$(shell if gcc -Wl,-v 2>&1 | grep -q 'GNU ld' ; then echo yes ; else echo no ; fi))
## - use this to get a memory map listing from the gnu linker
M2_LDFLAGS  += -Wl,-Map,mapfile
endif
endif
endif

ifeq "@STATIC@" "yes"
M2_LIBRARIES := $(TOSTATIC)
ifeq (@OS@,Linux)
# this is for gc somehow, see the end of gc/config.h
M2_LDFLAGS += -Wl,-defsym,_DYNAMIC=0
endif
else
M2_LIBRARIES :=
endif

clean::; rm -f compat.c compat.h
compat.c compat.h : configure ../../include/config.h
	FLAGS="$(LDFLAGS) $(LOADLIBES) $(LDLIBS)" @srcdir@/configure

M2types.o : M2types.h
M2lib.o scclib.o : compat.h ../c/compat.h ../c/compat.c types.h
gmp_int.o M2lib.o scclib.o gdbm_interface.o gc_cpp.o version.o M2inits.o debug.o : ../../include/config.h

clean::; rm -f startup.c
SSTRING := -e 's/\\/\\\\/g' -e 's/"/\\"/g' -e 's/\(.*\)/"\1\\n"/'
# layout.m2 is made by "configure" in the build directory
startup.c : ../m2/startup.m2 layout.m2
	(echo 'char startupString1[] =' ; \
	 cat layout.m2 | sed $(SSTRING) ; \
	 echo ';' ; \
	 echo 'char startupString2[] =' ; \
	 cat $< | sed $(SSTRING) ; \
	 echo ';' \
        ) >$@
clean :: ; rm -f layout.m2 startup.c

ifeq "@DUMPDATA@" "yes"
M2_LIBDEPS += ../dumpdata/libdump.a
M2_LIBRARIES += -L../dumpdata -ldump
endif

ifeq (@OS@,SunOS)
# We use mmap in loaddata(), but if it's dynamically loaded, it may stop working as our mapped
# data covers up the jump tables it uses.  I think.
M2_OBJECTS += mmap.o
mmap.o : /usr/lib/libc.a; ar x $^ $@
endif

M2_OBJECTS += tmp_init.o
tmp_init.o : tmp_init.c
clean::; rm -f tmp_init.c
tmp_init.c : $(DFILES)
	echo 'char timestamp[] = __DATE__ ", " __TIME__;' >tmp
	for i in $(DFILES:.d=) ; do echo "void $${i}__prepare();" ; done >>tmp
	echo 'int main_inits() {' >>tmp
	for i in $(DFILES:.d=) ; do echo "   $${i}__prepare();" ; done >>tmp
	echo '   return 0;}' >>tmp
	mv tmp tmp_init.c

###################### libraries

libfactory_init1.a : factory_init1.o ; ar ru $@ $^
libfactory_init2.a : factory_init2.o ; ar ru $@ $^
libM2inits2.a      : M2inits2.o       ; ar ru $@ $^

ifeq (@CONSTRUCTOR_ORDER_LIB@,LR)
M2_LIBRARIES += -L. -lfactory_init1 @SINGULARLIBS@ -lfactory_init2
else
M2_LIBRARIES += -L. -lfactory_init2 @SINGULARLIBS@ -lfactory_init1
endif
M2_LIBDEPS    += libfactory_init1.a libfactory_init2.a

M2_LIBRARIES +=  @BUILTLIBS@ @LIBS@

M2_LIBRARIES += -lstdc++

M2_LIBRARIES += @FLIBS_FLAGS@
M2_LIBRARIES += @FLIBS_STATIC@

ifeq "@STATIC@" "yes"
M2_LIBRARIES += $(UNSTATIC)
endif

M2_LIBRARIES += @FLIBS_DYNAMIC@

LINK_OUTPUT_OPTION = $(OUTPUT_OPTION)

ifeq (@CONSTRUCTOR_ORDER_LIB@,LR)
M2_LIBRARIES := -lM2inits2 $(M2_LIBRARIES)
else
M2_LIBRARIES := $(M2_LIBRARIES) -lM2inits2
endif
M2_LIBDEPS += libM2inits2.a

M2_OBJECTS += $(EFILES)

ifeq (@CONSTRUCTOR_ORDER_OBJ@,LR)
M2_OBJECTS := M2inits.o $(M2_OBJECTS)
else
M2_OBJECTS := $(M2_OBJECTS) M2inits.o
endif

clean::; rm -f ../bin/M2@EXE@
../bin/M2@EXE@ : $(M2_OBJECTS) $(M2_LIBDEPS)
	$(COMPILE.c) tmp_init.c -o tmp_init.o
	time @CC@ $(M2_LDFLAGS) $(M2_OBJECTS) $(M2_LIBRARIES) -lm -o "$@".tmp
ifeq "$(STRIP)" "yes"
ifneq "@STRIPCMD@" ""
	@STRIPCMD@ "$@".tmp
endif
endif
	mv "$@".tmp "$@"

mapfile.demangled : mapfile ; demangle <$< >$@
clean::; rm -f mapfile.demangled

interpret.a : $(M2_OBJECTS); $(AR) rcs $@ $^
ifeq "@XCODE@" "yes"
# Mike uses Xcode, an IDE, under MacOS 10 to link against
all :: interpret.a
endif

tags: @srcdir@/TAGS
clean::; rm -f TAGS @srcdir@/TAGS
@srcdir@/TAGS: Makefile $(SRCFILES)
	cd @srcdir@ && @ETAGS@ $(shell ../util/echoout -r $(SRCFILES))

clean ::; rm -f *.log a.out *.o *.sym *.a *.oo *.sig *.sg *.dep *.dp core gmon.out mapfile restart.tmp
distclean : clean; rm -f Makefile
Makefile : Makefile.in; cd ../..; ./config.status Macaulay2/d/Makefile
all :: .gdbinit
.gdbinit:; if [ -f @srcdir@/.gdbinit.$(USER) ]; then cp @srcdir@/.gdbinit.$(USER) $@; fi
clean::; rm -f .gdbinit

# Local Variables:
# compile-command: "make -C $M2BUILDDIR/Macaulay2/d "
# End:
