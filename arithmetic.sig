-- generated by scc1

signature arithmetic (
     use err;
     use system;
     use stdio;
     use strings;
     use varstrings;
     use C;
     import min(x:int,y:int):int;
     import max(x:int,y:int):int;
     import Integer:={negative:bool,body:array(ushort)};
     import toInteger(x:int):Integer;
     import toInteger(x:uint):Integer;
     import op<<(x:Integer,n:int):Integer;
     import op>>(x:Integer,n:int):Integer;
     import hash(x:Integer):int;
     import isInt(x:Integer):bool;
     import toInt(x:Integer):int;
     import Floor(x:double):Integer;
     import Round(x:double):Integer;
     import toDouble(x:Integer):double;
     import op%(x:Integer,y:ushort):ushort;
     import op+(x:Integer,y:Integer):Integer;
     import op-(y:Integer):Integer;
     import op-(x:Integer,y:Integer):Integer;
     import op*(x:Integer,y:Integer):Integer;
     import op===(x:Integer,y:Integer):bool;
     import op===(x:Integer,y:int):bool;
     import op===(x:int,y:Integer):bool;
     import op>(x:Integer,y:Integer):bool;
     import op<(x:Integer,y:Integer):bool;
     import op>=(x:Integer,y:Integer):bool;
     import op<=(x:Integer,y:Integer):bool;
     import op>(x:Integer,y:int):bool;
     import op<(x:Integer,y:int):bool;
     import op<(x:int,y:Integer):bool;
     import op>(x:int,y:Integer):bool;
     import op>=(x:Integer,y:int):bool;
     import op<=(x:Integer,y:int):bool;
     import op<=(x:int,y:Integer):bool;
     import op>=(x:int,y:Integer):bool;
     import op//(x:Integer,y:Integer):Integer;
     import op%(x:Integer,y:Integer):Integer;
     import op^(x:Integer,n:Integer):Integer;
     import op^(x:double,n:Integer):double;
     import op&(x:Integer,y:Integer):Integer;
     import op|(x:Integer,y:Integer):Integer;
     import op^^(x:Integer,y:Integer):Integer;
     import op>(x:Integer,y:double):bool;
     import op<(x:Integer,y:double):bool;
     import op<(x:double,y:Integer):bool;
     import op>(x:double,y:Integer):bool;
     import op>=(x:Integer,y:double):bool;
     import op<=(x:Integer,y:double):bool;
     import op<=(x:double,y:Integer):bool;
     import op>=(x:double,y:Integer):bool;
     import valn2(x:Integer):int;
     import tostring(x:Integer):string;
     import op<<(o:file,x:Integer):file;
     import op+(x:int,y:Integer):Integer;
     import op+(x:Integer,y:int):Integer;
     import op-(x:int,y:Integer):Integer;
     import op-(x:Integer,y:int):Integer;
     import op*(x:int,y:Integer):Integer;
     import op*(x:Integer,y:int):Integer;
     import op+(x:double,y:Integer):double;
     import op+(x:Integer,y:double):double;
     import op-(x:double,y:Integer):double;
     import op-(x:Integer,y:double):double;
     import op*(x:double,y:Integer):double;
     import op*(x:Integer,y:double):double;
     import op/(x:double,y:Integer):double;
     import op/(x:Integer,y:double):double;
     import abs(x:Integer):Integer;
     import gcd(x:Integer,y:Integer):Integer;
     import Rational:={numerator:Integer,denominator:Integer};
     import toDouble(x:Rational):double;
     import op+(x:double,y:Rational):double;
     import op-(x:double,y:Rational):double;
     import op*(x:double,y:Rational):double;
     import op/(x:double,y:Rational):double;
     import op+(x:Rational,y:double):double;
     import op-(x:Rational,y:double):double;
     import op*(x:Rational,y:double):double;
     import op/(x:Rational,y:double):double;
     import op/(x:Integer,y:Integer):Rational;
     import op/(x:int,y:Integer):Rational;
     import op/(x:Integer,y:int):Rational;
     import op+(x:Rational,y:Integer):Rational;
     import op+(x:Rational,y:int):Rational;
     import op+(x:Integer,y:Rational):Rational;
     import op+(x:int,y:Rational):Rational;
     import op-(x:Rational,y:Integer):Rational;
     import op-(x:Rational,y:int):Rational;
     import op-(x:Integer,y:Rational):Rational;
     import op-(x:int,y:Rational):Rational;
     import op*(x:Rational,y:Integer):Rational;
     import op*(x:Rational,y:int):Rational;
     import op*(x:Integer,y:Rational):Rational;
     import op*(x:int,y:Rational):Rational;
     import op/(x:Rational,y:Integer):Rational;
     import op/(x:Rational,y:int):Rational;
     import op/(x:Integer,y:Rational):Rational;
     import op/(x:int,y:Rational):Rational;
     import op+(x:Rational,y:Rational):Rational;
     import op-(y:Rational):Rational;
     import op-(x:Rational,y:Rational):Rational;
     import op*(x:Rational,y:Rational):Rational;
     import op/(x:Rational,y:Rational):Rational;
     import op^(x:Rational,nn:Integer):Rational;
     import op<<(o:file,x:Rational):file;
     import op===(x:Rational,y:Rational):bool;
     import op===(x:Rational,y:Integer):bool;
     import op===(x:Rational,y:int):bool;
     import op===(y:Integer,x:Rational):bool;
     import op===(y:int,x:Rational):bool;
     import op<(x:Rational,y:Rational):bool;
     import op<=(x:Rational,y:Rational):bool;
     import op>(x:Rational,y:Rational):bool;
     import op>=(x:Rational,y:Rational):bool;
     import op<(x:Integer,y:Rational):bool;
     import op<=(x:Integer,y:Rational):bool;
     import op>(x:Integer,y:Rational):bool;
     import op>=(x:Integer,y:Rational):bool;
     import op<(x:Rational,y:Integer):bool;
     import op<=(x:Rational,y:Integer):bool;
     import op>(x:Rational,y:Integer):bool;
     import op>=(x:Rational,y:Integer):bool;
     import op<(x:int,y:Rational):bool;
     import op<=(x:int,y:Rational):bool;
     import op>(x:int,y:Rational):bool;
     import op>=(x:int,y:Rational):bool;
     import op<(x:Rational,y:int):bool;
     import op<=(x:Rational,y:int):bool;
     import op>(x:Rational,y:int):bool;
     import op>=(x:Rational,y:int):bool;
     import op<(x:double,y:Rational):bool;
     import op<=(x:double,y:Rational):bool;
     import op>(x:double,y:Rational):bool;
     import op>=(x:double,y:Rational):bool;
     import op<(x:Rational,y:double):bool;
     import op<=(x:Rational,y:double):bool;
     import op>(x:Rational,y:double):bool;
     import op>=(x:Rational,y:double):bool;
     import abs(x:Rational):Rational;
     import converttonet(i:Integer):string;
);
