#! /bin/sh

TMP=tmp$$.c

cat <<EOF >compat.h
/* this file produced automatically by configure, do not edit */
#include <stdlib.h>
#include <math.h>
#include <gc.h>
#include <string.h>
#include <gmp.h>
#include "memdebug.h"
EOF

cat <<EOF >compat.c
/* this file produced automatically by configure, do not edit */
#include <stdlib.h>
#include <errno.h>
EOF

cat <<EOF >compat.mak
# this file was machine generated
EOF

cat <<'EOF' >$TMP
int main(){ return 0; }
EOF
if $CC $TMP -lm >/dev/null 2>&1
then :
else echo "can't compile at all!" >&2
     exit 1
fi

cat <<'EOF' >$TMP
#include <math.h>
int main(){
	double x;
	__finite(x);
	return 0;
	}
EOF
$CC $TMP -lm >/dev/null 2>&1 || echo '#define __finite finite' >>compat.h


cat <<'EOF' >$TMP
#include <math.h>
int main(){
	double x;
	__isnan(x);
	return 0;
	}
EOF
$CC $TMP -lm >/dev/null 2>&1 || echo '#define __isnan isnan' >>compat.h


cat <<'EOF' >$TMP
#include <math.h>
int main(){
	double x;
	__isinf(x);
	return 0;
	}
EOF
$CC $TMP -lm >/dev/null 2>&1 || echo '#define __isinf isinf' >>compat.h


cat >>compat.c <<'EOF'
#ifndef ENOSYS
#define ENOSYS 0
#endif
EOF

# cat <<'EOF' >$TMP
# main(){ }
# EOF
# if $CC $TMP $FLAGS -lsocket >/dev/null 2>&1
# then FLAGS="$FLAGS -lsocket"
#      cat <<EOF >compat.mak
# SOCKET_LIB := TRUE
# EOF
# fi

cat <<'EOF' >$TMP
int main(){ getprotobyname(); }
EOF
$CC $TMP $FLAGS >/dev/null 2>&1 || (
	echo 'void *getprotobyname() { errno = ENOSYS; return 0; }'
	) >>compat.c

cat <<'EOF' >$TMP
int main(){
        accept();
	return 0;
        }
EOF
$CC $TMP $FLAGS >/dev/null 2>&1 || (
	echo 'int accept() { errno = ENOSYS; return -1; }'
	) >>compat.c

cat <<'EOF' >$TMP
int main(){ bind(); return 0; }
EOF
$CC $TMP $FLAGS >/dev/null 2>&1 || (
	echo 'int bind() { errno = ENOSYS; return -1; }'
	) >>compat.c

cat <<'EOF' >$TMP
int main(){ listen(); return 0; }
EOF
$CC $TMP $FLAGS >/dev/null 2>&1 || (
	echo 'int listen() { errno = ENOSYS; return -1; }'
	) >>compat.c

cat <<'EOF' >$TMP
int main(){ socket(); return 0; }
EOF
$CC $TMP $FLAGS >/dev/null 2>&1 || (
	echo 'int socket() { errno = ENOSYS; return -1; }'
	) >>compat.c

cat <<'EOF' >$TMP
int main(){ gethostbyname(); return 0; }
EOF
$CC $TMP $FLAGS >/dev/null 2>&1 ||
	echo 'void *gethostbyname() { errno = ENOSYS; return (void *)0; }' \
	>>compat.c

cat <<'EOF' >$TMP
int main(){ inet_addr(); return 0; }
EOF
$CC $TMP $FLAGS >/dev/null 2>&1 || 
	echo 'int inet_addr() { errno = ENOSYS; return -1; }' \
	>>compat.c

cat <<'EOF' >$TMP
int main(){ getservbyname(); return 0; }
EOF
$CC $TMP $FLAGS >/dev/null 2>&1 || 
	echo 'void *getservbyname() { errno = ENOSYS; return (void *)0; }' \
	>>compat.c

cat <<'EOF' >$TMP
int main(){ authdes_create(); return 0; }
EOF
$CC $TMP $FLAGS >/dev/null 2>&1 || (
	echo '#ifndef ENOSYS'
	echo '#define ENOSYS 0'
	echo '#endif'
	echo 'void *authdes_create() { errno = ENOSYS; return (void *)0; }' 
	) >>compat.c

cat <<'EOF' >$TMP
int main(){ xdrmem_create(); return 0; }
EOF
$CC $TMP $FLAGS >/dev/null 2>&1 || 
	echo 'void *xdrmem_create() { errno = ENOSYS; return (void *)0; }' \
	>>compat.c

cat <<'EOF' >$TMP
#include <errno.h>
#include <stdio.h>
extern const int * sys_errlist;	/* the wrong type, to provoke the compiler */
int main(){return 0;}
EOF
$CC $TMP $FLAGS >/dev/null 2>&1 || 
	echo '#define SYS_ERRLIST_IS_DECLARED' \
	>>compat.h

cat <<'EOF' >$TMP
#include <errno.h>
#include <stdio.h>
extern const int * h_errlist;	/* the wrong type, to provoke the compiler */
int main(){return 0;}
EOF
$CC $TMP $FLAGS >/dev/null 2>&1 || 
	echo '#define H_ERRLIST_IS_DECLARED' \
	>>compat.h

cat <<'EOF' >$TMP
#include <errno.h>
#include <stdio.h>
extern const char * const sys_errlist[];
int main(){return 0;}
EOF
$CC $TMP $FLAGS >/dev/null 2>&1 || 
	echo '#define SYS_ERRLIST_NOT_CONST' \
	>>compat.h

cat <<'EOF' >$TMP
int main(){ connect(); return 0; }
EOF
$CC $TMP $FLAGS >/dev/null 2>&1 || 
	echo 'int connect() { errno = ENOSYS; return -1; }' \
	>>compat.c

cat <<'EOF' >$TMP
int main(){ setsockopt(); return 0; }
EOF
$CC $TMP $FLAGS >/dev/null 2>&1 || 
	echo 'int setsockopt() { errno = ENOSYS; return -1; }' \
	>>compat.c

cat <<'EOF' >$TMP
int main(){ extern char *sys_errlist; char *p = sys_errlist; return -1; }
EOF
gcc $TMP $FLAGS >/dev/null 2>&1 || 
	echo '#define NO_SYS_ERRLIST 1' \
	>>compat.h

cat <<'EOF' >$TMP
#include <netinet/in.h>
int main(){ htons(0); return 0; }
EOF
$CC $TMP $FLAGS >/dev/null 2>&1 || 
	echo 'short htons(short x) { return x; }' \
	>>compat.c

cat <<'EOF' >$TMP
#include <netdb.h>
extern int h_nerr;
int main(){ 
    int i = h_nerr;
    herror((char *)0); 
    return 0;
    }
EOF
$CC $TMP $FLAGS >/dev/null 2>&1 || 
	echo '#define NO_HERROR 1' \
	>>compat.h

rm $TMP
