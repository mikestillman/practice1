#! /bin/sh

TMP=tmp$$.c

LDFLAGS='-static'

cat <<EOF >compat.h
/* this file produced automatically by configure, do not edit */
#include <stdlib.h>
#include <math.h>
#include <gc.h>
#include <string.h>
#include <gmp.h>
#include "memdebug.h"
EOF

cat <<EOF >compat.c
/* this file produced automatically by configure, do not edit */
#include <stdlib.h>
#include <errno.h>
EOF

cat <<'EOF' >$TMP
#include <math.h>
main(){
	double x;
	__finite(x);
	}
EOF
$CC $TMP -lm >/dev/null 2>&1 || echo '#define __finite finite' >>compat.h


cat <<'EOF' >$TMP
#include <math.h>
main(){
	double x;
	__isnan(x);
	}
EOF
$CC $TMP -lm >/dev/null 2>&1 || echo '#define __isnan isnan' >>compat.h


cat <<'EOF' >$TMP
#include <math.h>
main(){
	double x;
	__isinf(x);
	}
EOF
$CC $TMP -lm >/dev/null 2>&1 || echo '#define __isinf isinf' >>compat.h


cat >>compat.c <<'EOF'
#ifndef ENOSYS
#define ENOSYS 0
#endif
EOF

cat <<'EOF' >$TMP
main(){ }
EOF
if $CC $TMP $LDFLAGS -lsocket >/dev/null 2>&1
then LDFLAGS="$LDFLAGS -lsocket"
fi

cat <<'EOF' >$TMP
main(){ getprotobyname(); }
EOF
$CC $TMP $LDFLAGS >/dev/null 2>&1 || (
	echo 'void *getprotobyname() { errno = ENOSYS; return 0; }'
	) >>compat.c

cat <<'EOF' >$TMP
main(){ accept(); }
EOF
$CC $TMP $LDFLAGS >/dev/null 2>&1 || (
	echo 'int accept() { errno = ENOSYS; return -1; }'
	) >>compat.c

cat <<'EOF' >$TMP
main(){ bind(); }
EOF
$CC $TMP $LDFLAGS >/dev/null 2>&1 || (
	echo 'int bind() { errno = ENOSYS; return -1; }'
	) >>compat.c

cat <<'EOF' >$TMP
main(){ listen(); }
EOF
$CC $TMP $LDFLAGS >/dev/null 2>&1 || (
	echo 'int listen() { errno = ENOSYS; return -1; }'
	) >>compat.c

cat <<'EOF' >$TMP
main(){ socket(); }
EOF
$CC $TMP $LDFLAGS >/dev/null 2>&1 || (
	echo 'int socket() { errno = ENOSYS; return -1; }'
	) >>compat.c

cat <<'EOF' >$TMP
main(){ gethostbyname(); }
EOF
$CC $TMP $LDFLAGS >/dev/null 2>&1 ||
	echo 'void *gethostbyname() { errno = ENOSYS; return (void *)0; }' \
	>>compat.c

cat <<'EOF' >$TMP
main(){ inet_addr(); }
EOF
$CC $TMP $LDFLAGS >/dev/null 2>&1 || 
	echo 'int inet_addr() { errno = ENOSYS; return -1; }' \
	>>compat.c

cat <<'EOF' >$TMP
main(){ getservbyname(); }
EOF
$CC $TMP $LDFLAGS >/dev/null 2>&1 || 
	echo 'void *getservbyname() { errno = ENOSYS; return (void *)0; }' \
	>>compat.c

cat <<'EOF' >$TMP
main(){ authdes_create(); }
EOF
$CC $TMP $LDFLAGS >/dev/null 2>&1 || (
	echo '#ifndef ENOSYS'
	echo '#define ENOSYS 0'
	echo '#endif'
	echo 'void *authdes_create() { errno = ENOSYS; return (void *)0; }' 
	) >>compat.c

cat <<'EOF' >$TMP
main(){ xdrmem_create(); }
EOF
$CC $TMP $LDFLAGS >/dev/null 2>&1 || 
	echo 'void *xdrmem_create() { errno = ENOSYS; return (void *)0; }' \
	>>compat.c

cat <<'EOF' >$TMP
#include <errno.h>
extern const char * const sys_errlist[];
main(){}
EOF
$CC $TMP $LDFLAGS >/dev/null 2>&1 || 
	echo '#define SYS_ERRLIST_NOT_CONST' \
	>>compat.h

cat <<'EOF' >$TMP
main(){ connect(); }
EOF
$CC $TMP $LDFLAGS >/dev/null 2>&1 || 
	echo 'int connect() { errno = ENOSYS; return -1; }' \
	>>compat.c

cat <<'EOF' >$TMP
main(){ setsockopt(); }
EOF
$CC $TMP $LDFLAGS >/dev/null 2>&1 || 
	echo 'int setsockopt() { errno = ENOSYS; return -1; }' \
	>>compat.c

cat <<'EOF' >$TMP
#include <netinet/in.h>
main(){ htons(0); }
EOF
$CC $TMP $LDFLAGS >/dev/null 2>&1 || 
	echo 'short htons(short x) { return x; }' \
	>>compat.c

cat <<'EOF' >$TMP
#include <netdb.h>
main(){ herror((char *)0); }
EOF
$CC $TMP $LDFLAGS >/dev/null 2>&1 || 
	echo '#define NO_HERROR 1' \
	>>compat.h

rm $TMP
