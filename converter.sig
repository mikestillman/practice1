-- generated by scc1

signature converter (
     use system;
     use binding;
     use parser;
     use lex;
     use arithmetic;
     use nets;
     use tokens;
     use err;
     use stdiop;
     use ctype;
     use stdio;
     use varstrings;
     use strings;
     use basic;
     import AdjacentFun:binop;
     import GlobalAssignFun:binop;
     import AssignFun:binop;
     import AssignElemFun:ternop;
     import AssignQuotedElemFun:ternop;
     import TryElseFun:binop;
     import TryFun:unop;
     import IfThenFun:binop;
     import IfThenElseFun:ternop;
     import WhileFun:binop;
     import QuoteFun:unop;
     import UntilFun:binop;
     import NewFun:unop;
     import NewFromFun:binop;
     import NewOfFun:binop;
     import NewOfFromFun:ternop;
     import AssignNewFun:binop;
     import AssignNewOfFun:ternop;
     import AssignNewFromFun:ternop;
     import AssignNewOfFromFun:multop;
     import InstallFun:multop;
     import UnaryInstallFun:ternop;
     import braceFun:multop;
     import bracketFun:multop;
     import convert(e:ParseTree):Code;
     import frame(scopenum:int):Frame;
     import makeSymbolClosure(s:Symbol):SymbolClosure;
     import codePosition(e:Code):Position;
     import errorExpr(message:string):Expr;
     import errorExpr(message:string,report:Expr):Expr;
     import quoteit(name:string):string;
     import NotYet(desc:string):Expr;
     import WrongArg(desc:string):Expr;
     import WrongArg(n:int,desc:string):Expr;
     import WrongArgInteger():Expr;
     import WrongArgSmallInteger():Expr;
     import WrongArgInteger(n:int):Expr;
     import WrongArgString():Expr;
     import WrongArgSmallInteger(n:int):Expr;
     import ArgChanged(name:string,n:int):Expr;
     import WrongNumArgs(name:string,n:int):Expr;
     import WrongNumArgs(n:int):Expr;
     import WrongNumArgs(name:string,m:int,n:int):Expr;
     import WrongNumArgs(m:int,n:int):Expr;
     import TooFewArgs(name:string,m:int):Expr;
     import TooManyArgs(name:string,m:int):Expr;
     import ErrorDepth:int;
     import errorpos(e:Code,message:string):Expr;
     import errorpos(e:Code,message:string,report:Expr):Expr;
     import eval(c:Code):Expr;
     import evalSequence(v:CodeSequence):Expr;
     import trace:bool;
     import Semicolonfun:binop;
     import recursionlimit:int;
     import recursiondepth:int;
     import setup(word:Word):void;
     import setup(word:Word,fn:unop):void;
     import setup(word:Word,fn:binop):void;
     import setup(word:Word,fun1:unop,fun2:binop):void;
     import setup(word:Word,fun1:unop,fun2:unop):void;
     import setup(e:SymbolClosure,fn:unop):void;
     import setuppostfix(e:SymbolClosure,fn:unop):void;
     import setup(e:SymbolClosure,fn:binop):void;
     import setup(e:SymbolClosure,fun1:unop,fun2:binop):void;
     import setup(e:SymbolClosure,fun1:unop,fun2:unop):void;
     import setupop(name:string,fun:unop):void;
     import setupfun(name:string,fun:unop):void;
     import setupfun(name:string,value:fun):void;
     import setupconst(name:string,value:Expr):Symbol;
);
