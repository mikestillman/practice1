-- generated by scc1

signature objects (
     use system;
     use strings;
     use system;
     use stdio;
     use arithmetic;
     use nets;
     use tokens;
     use basic;
     use converter;
     use structure;
     use binding;
     import toExpr(h:int):Expr;
     import equal(lhs:Expr,rhs:Expr):Expr;
     import lookup1(object:Object,key:Expr,keyhash:int):Expr;
     import lookup1(object:Object,key:Expr):Expr;
     import lookup1force(object:Object,key:Expr,keyhash:int):Expr;
     import lookup1force(object:Object,key:Expr):Expr;
     import lookup1Q(object:Object,key:Expr,keyhash:int):bool;
     import lookup1Q(object:Object,key:Expr):bool;
     import lookup(object:Object,key:Expr,keyhash:int):Expr;
     import lookup(object:Object,key:Expr):Expr;
     import lookup(object:Object,key:SymbolClosure):Expr;
     import remove(x:Object,key:Expr):Expr;
     import assignobject(x:Object,key:Expr,h:int,value:Expr):Expr;
     import assignobject(x:Object,key:Expr,value:Expr):Expr;
     import assignobject(x:Object,i:Code,rhs:Code):Expr;
     import assignquotedobject(x:Object,i:Code,rhs:Code):Expr;
     import Parent(e:Expr):Object;
     import parentfun(e:Expr):Expr;
     import Class(e:Expr):Object;
     import commonAncestor(x:Object,y:Object):Object;
     import unarymethod(rhs:Code,methodkey:SymbolClosure):Expr;
     import unarymethod(right:Expr,methodkey:SymbolClosure):Expr;
     import install(meth:Expr,lhs:Object,rhs:Object,value:Expr):Expr;
     import lookup2(lhs:Object,rhs:Object,meth:Expr,methhash:int):Expr;
     import lookup2(lhs:Object,rhs:Object,meth:Expr):Expr;
     import lookup2(lhs:Object,rhs:Object,meth:SymbolClosure):Expr;
     import install(meth:Expr,s1:Object,s2:Object,s3:Object,value:Expr):Expr;
     import lookup3(s1:Object,s2:Object,s3:Object,meth:Expr,methhash:int):Expr;
     import lookup3(s1:Object,s2:Object,s3:Object,meth:Expr):Expr;
     import binarymethod(lhs:Code,rhs:Code,methodkey:SymbolClosure):Expr;
     import binarymethod(left:Expr,rhs:Code,methodkey:SymbolClosure):Expr;
     import binarymethod(left:Expr,right:Expr,methodkey:SymbolClosure):Expr;
     import install(meth:Expr,s:Object,value:Expr):Expr;
     import Tally:Object;
     import Set:Object;
);
