-- generated by scc1

signature parser (
     use err;
     use system;
     use strings;
     use varstrings;
     use lex;
     use stdio;
     use stdiop;
     use arithmetic;
     use nets;
     use tokens;
     import thenW:Word;
     import elseW:Word;
     import ofW:Word;
     import doW:Word;
     import fromW:Word;
     import debug:bool;
     import tracefile:file;
     import openTokenFile(filename:string):(TokenFile or errmsg);
     import setprompt(file:TokenFile,prompt:function():void):void;
     import flush(file:TokenFile):void;
     import close(file:TokenFile):void;
     import gettoken(file:TokenFile,obeylines:bool):Token;
     import peektoken(file:TokenFile,obeylines:bool):Token;
     import errorTree:ParseTree;
     import defaultunary(token1:Token,file:TokenFile,prec:int,obeylines:bool):ParseTree;
     import parse(file:TokenFile,prec:int,obeylines:bool):ParseTree;
     import nparse(file:TokenFile,prec:int,obeylines:bool):ParseTree;
     import unaryop(token1:Token,file:TokenFile,prec:int,obeylines:bool):ParseTree;
     import nunaryop(token1:Token,file:TokenFile,prec:int,obeylines:bool):ParseTree;
     import precObject:int;
     import defaultbinary(lhs:ParseTree,token2:Token,file:TokenFile,prec:int,obeylines:bool):ParseTree;
     import postfixop(lhs:ParseTree,token2:Token,file:TokenFile,prec:int,obeylines:bool):ParseTree;
     import binaryop(lhs:ParseTree,token2:Token,file:TokenFile,prec:int,obeylines:bool):ParseTree;
     import nbinaryop(lhs:ParseTree,token2:Token,file:TokenFile,prec:int,obeylines:bool):ParseTree;
     import arrowop(lhs:ParseTree,token2:Token,file:TokenFile,prec:int,obeylines:bool):ParseTree;
     import errorunary(token1:Token,file:TokenFile,prec:int,obeylines:bool):ParseTree;
     import errorbinary(lhs:ParseTree,token2:Token,file:TokenFile,prec:int,obeylines:bool):ParseTree;
     import addmatch(left:string,right:string):void;
     import varexprlist:={list:array(ParseTree),size:int};
     import newvarexprlist(i:int):varexprlist;
     import op<<(v:varexprlist,e:ParseTree):varexprlist;
     import toexprlist(v:varexprlist):ArrayParseTree;
     import binarybracket(lhs:ParseTree,token2:Token,file:TokenFile,prec:int,obeylines:bool):ParseTree;
     import leftparen:parsefuns;
     import rightparen:parsefuns;
     import unarywhile(iftoken:Token,file:TokenFile,prec:int,obeylines:bool):ParseTree;
     import unaryquote(quotetoken:Token,file:TokenFile,prec:int,obeylines:bool):ParseTree;
     import unaryglobal(quotetoken:Token,file:TokenFile,prec:int,obeylines:bool):ParseTree;
     import unarylocal(quotetoken:Token,file:TokenFile,prec:int,obeylines:bool):ParseTree;
     import unaryif(iftoken:Token,file:TokenFile,prec:int,obeylines:bool):ParseTree;
     import unarytry(trytoken:Token,file:TokenFile,prec:int,obeylines:bool):ParseTree;
     import unarynew(newtoken:Token,file:TokenFile,prec:int,obeylines:bool):ParseTree;
);
