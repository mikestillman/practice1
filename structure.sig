-- generated by scc1

signature structure (
     use system;
     use stdio;
     use stdiop;
     use binding;
     use system;
     use strings;
     use nets;
     use tokens;
     use err;
     use stdio;
     use arithmetic;
     use basic;
     use converter;
     import copy(e:Expr):Expr;
     import seq(e:Expr):Expr;
     import splice(a:Sequence):Sequence;
     import splice(e:Expr):Expr;
     import accumulate(f0:function():Expr,f1:function(Expr):Expr,f2:function(Expr,Expr):Expr,e:Expr):Expr;
     import map(f:function(Expr):Expr,a:Sequence):Sequence;
     import join(v:Sequence,w:Sequence):Sequence;
     import subarray(v:Sequence,start:int,leng:int):Sequence;
     import subarray(v:Sequence,leng:int):Sequence;
     import isInteger(e:Expr):bool;
     import isInt(e:Expr):bool;
     import isIntArray(e:Sequence):bool;
     import isIntArray(e:Expr):bool;
     import toInt(e:Expr):int;
     import toIntArray(e:Sequence):array(int);
     import toIntArray(e:Expr):array(int);
     import toArrayExpr(v:array(int)):Sequence;
     import newlist(class:Object,v:Sequence):List;
     import basictype(o:Object):Object;
     import RecursionLimit():Expr;
     import backtr(z:Expr):Expr;
     import backtr(z:Expr,report:Expr):Expr;
     import WrongNumArgs(c:Code,wanted:int,got:int):Expr;
     import apply(c:FunctionClosure,v:Sequence):Expr;
     import apply(c:FunctionClosure,e:Expr):Expr;
     import apply(c:FunctionClosure,cs:CodeSequence):Expr;
     import apply(f:Expr,v:Sequence):Expr;
     import apply(f:Expr,e:Expr):Expr;
     import apply2:function(Expr,Expr):Expr;
     import apply(g:Expr,e0:Expr,e1:Expr):Expr;
     import apply(g:Expr,e0:Expr,e1:Expr,e2:Expr):Expr;
     import MissingMethod(name:string,method:string):Expr;
     import MissingMethod(method:SymbolClosure):Expr;
     import MissingMethodPair(method:string):Expr;
     import MissingMethodPair(method:SymbolClosure):Expr;
     import MissingMethodPair(method:SymbolClosure,left:Expr,right:Expr):Expr;
);
